---
import Layout from '../layouts/Layout.astro';
import EventCard from '../components/EventCard.astro';
import Filters from '../components/Filters.astro';

export interface Event {
    id: number;
    url: string;
    title: string;
    description: string;
    cityId: number;
    cityName: string;
    districtId: number;
    districtName: string;
    eventDate: number | string;
    imageUrl?: string;
    organizer?: string;
    capacity?: number;
}

interface EventsResponse {
    events: Event[];
}

interface LocationsResponse {
    cities: Location[];
    districts: District[];
}

// Server-side fetch of events for initial render. The Filters form uses GET so filtering works without client JS.
const url = new URL(Astro.request.url);
const selectedCity = url.searchParams.get('city') || '';
const selectedDistrict = url.searchParams.get('district') || '';

async function fetchEventsServer(): Promise<Event[]> {
    try {
        // Pass the filter params from the page URL to the API endpoint URL
        const apiUrl = new URL('/api/events', Astro.url.origin);
        if (selectedCity) apiUrl.searchParams.set('city', selectedCity);
        if (selectedDistrict) apiUrl.searchParams.set('district', selectedDistrict);

        const res = await fetch(apiUrl);
        if (!res.ok) return [];
        const data = await res.json() as EventsResponse;
        return data.events || [];
    } catch {
        return [];
    }
}

async function fetchLocations(): Promise<LocationsResponse> {
    try {
        // Use absolute URL for server-side fetching
        const res = await fetch(new URL('/api/locations', Astro.url));
        if (!res.ok) return { cities: [], districts: [] };
        return await res.json() as LocationsResponse;
    } catch {
        return { cities: [], districts: [] };
    }
}

interface Location {
    id: number;
    name: string;
}

interface District extends Location {
    cityId: number;
}

const [filteredEvents, { cities, districts }] = await Promise.all([
    fetchEventsServer(),
    fetchLocations()
]);
console.log('[Index] Number of events:', filteredEvents.length);
if (filteredEvents.length > 0) {
  console.log('[Index] First event sample:', {
    id: filteredEvents[0].id,
    title: filteredEvents[0].title,
    keys: Object.keys(filteredEvents[0])
  });
}
---

<Layout>
	<section class="mb-8">
		<h1 class="text-3xl font-extrabold text-slate-900">Free events near you</h1>
		<p class="text-slate-600 mt-2">Discover upcoming free events across Peru. Filter by city and district.</p>
	</section>

	<section class="mb-6" id="filters">
		<!-- Server-rendered Filters; uses GET to filter without client JS -->
		<Filters cities={cities} districts={districts} selectedCity={selectedCity} selectedDistrict={selectedDistrict} />
	</section>

	<section id="events">
  <div id="events-grid" class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
    {filteredEvents.length === 0 ? (
      <div class="col-span-full text-center text-slate-500 mt-8">No upcoming events found.</div>
    ) : (
      filteredEvents.map(e => {
        console.log('[Index] Mapping event:', e.id, e.title);
        return <EventCard event={e} />;
      })
    )}
  </div>
</section>

</Layout>
